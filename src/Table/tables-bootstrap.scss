.table {
  width: 100%;
  margin-bottom: var(--pgn-core-spacer);
  color: var(--pgn-table-color-base);
  background-color: var(--pgn-table-bg-base);

  th,
  td {
    padding: var(--pgn-table-cell-padding-base);
    vertical-align: top;
    border-top: var(--pgn-table-border-width) solid var(--pgn-table-color-border);
  }

  thead th {
    vertical-align: bottom;
    border-bottom: calc(2 * var(--pgn-table-border-width)) solid var(--pgn-table-color-border);
  }

  tbody + tbody {
    border-top: calc(2 * var(--pgn-table-border-width)) solid var(--pgn-table-color-border);
  }

  .thead-dark {
    th {
      color: var(--pgn-table-dark-color-base);
      background-color: var(--pgn-table-dark-bg-base);
      border-color: var(--pgn-table-dark-color-border);
    }
  }

  .thead-light {
    th {
      color: var(--pgn-table-color-head);
      background-color: var(--pgn-table-bg-head);
      border-color: var(--pgn-table-color-border);
    }
  }
}

// Condensed table w/ half padding
.table-sm {
  th,
  td {
    padding: var(--pgn-table-cell-padding-sm);
  }
}

// Border versions
//
// Add or remove borders all around the table and between all the columns.
.table-bordered {
  border: var(--pgn-table-border-width) solid var(--pgn-table-color-border);

  th,
  td {
    border: var(--pgn-table-border-width) solid var(--pgn-table-color-border);
  }

  thead {
    th,
    td {
      border-bottom-width: calc(2 * var(--pgn-table-border-width));
    }
  }
}

.table-borderless {
  th,
  td,
  thead th,
  tbody + tbody {
    border: 0;
  }
}

// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)
.table-striped {
  tbody tr:nth-of-type(#{var(--pgn-table-striped-order)}) {
    background-color: var(--pgn-table-bg-accent);
  }
}

// Hover effect
//
// Placed here since it has to come after the potential zebra striping
.table-hover {
  tbody tr {
    @include hover() {
      color: var(--pgn-table-color-hover);
      background-color: var(--pgn-table-bg-hover);
    }
  }
}


// Table backgrounds
//
// Exact selectors below required to override `.table-striped` and prevent
// inheritance to nested tables.
@each $color, $value in $theme-colors {
  @include table-row-variant(
    $color,
    theme-color-level($color, $table-bg-level),
    theme-color-level($color, $table-border-level));
}

@include table-row-variant(active, $table-active-bg);


// Dark styles
//
// Same table markup, but inverted color scheme: dark background and light text.
.table-dark {
  color: var(--pgn-table-dark-color-base);
  background-color: var(--pgn-table-dark-bg-base);

  th,
  td,
  thead th {
    border-color: var(--pgn-table-dark-color-border);
  }

  &.table-bordered {
    border: 0;
  }

  &.table-striped {
    tbody tr:nth-of-type(#{var(--pgn-table-striped-order)}) {
      background-color: var(--pgn-table-dark-bg-accent);
    }
  }

  &.table-hover {
    tbody tr {
      @include hover() {
        color: var(--pgn-table-dark-color-hover);
        background-color: var(--pgn-table-dark-bg-hover);
      }
    }
  }
}


// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.
.table-responsive {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $next: breakpoint-next($breakpoint, $grid-breakpoints);
    $infix: breakpoint-infix($next, $grid-breakpoints);

    &#{$infix} {
      @include media-breakpoint-down($breakpoint) {
        display: block;
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;

        > .table-bordered {
          border: 0;
        }
      }
    }
  }
}
