import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { FormGroupContextProvider } from './FormGroupContext';
import { FORM_CONTROL_SIZES } from './constants';

interface Props<As extends React.ElementType> {
  /** Specifies contents of the component. */
  children: React.ReactNode;
  /** Specifies class name to append to the base element. */
  className?: string;
  /** Specifies base element for the component. */
  as?: As;
  /** Specifies id to use in the group, it will be used as `htmlFor` in `FormLabel` and as `id` in input components.
   *  Will be autogenerated if none is supplied. */
  controlId?: string;
  /** Specifies whether to display components in invalid state, this affects styling. */
  isInvalid?: boolean;
  /** Specifies whether to display components in valid state, this affects styling. */
  isValid?: boolean;
  /** Specifies size for the component. */
  size?: typeof FORM_CONTROL_SIZES.SMALL | typeof FORM_CONTROL_SIZES.LARGE;
}

function FormGroup<As extends React.ElementType = 'div'>({
  children,
  controlId,
  isInvalid = false,
  isValid = false,
  size,
  as,
  ...props
}: Props<As> & React.ComponentPropsWithoutRef<As>) {
  return React.createElement(
    as ?? 'div',
    {
      ...props,
      className: classNames('pgn__form-group', props.className),
    }, (
      <FormGroupContextProvider
        controlId={controlId}
        isInvalid={isInvalid}
        isValid={isValid}
        size={size}
      >
        {children}
      </FormGroupContextProvider>
    ),
  );
}

const SIZE_CHOICES = ['sm', 'lg'];

FormGroup.propTypes = {
  /** Specifies contents of the component. */
  children: PropTypes.node.isRequired,
  /** Specifies class name to append to the base element. */
  className: PropTypes.string,
  /** Specifies base element for the component. */
  as: PropTypes.elementType,
  /** Specifies id to use in the group, it will be used as `htmlFor` in `FormLabel` and as `id` in input components.
   *  Will be autogenerated if none is supplied. */
  controlId: PropTypes.string,
  /** Specifies whether to display components in invalid state, this affects styling. */
  isInvalid: PropTypes.bool,
  /** Specifies whether to display components in valid state, this affects styling. */
  isValid: PropTypes.bool,
  /** Specifies size for the component. */
  size: PropTypes.oneOf(SIZE_CHOICES),
};

export default FormGroup;
