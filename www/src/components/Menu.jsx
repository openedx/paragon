import React from 'react';
import PropTypes from 'prop-types';
import { Link, graphql, useStaticQuery } from 'gatsby';
import { Issue } from '../../../icons';
import { Container, Row, Col, Tooltip, OverlayTrigger, Popover, Button, Badge, Icon } from '~paragon-react'; // eslint-disable-line

// MDX transforms markdown generated by gatsby-transformer-react-docgen
// This query filters out all of those markdown nodes and assumes all others
// are for page creation purposes.
const menuQuery = graphql`
  query menuQuery {
    components: allMdx(
      filter: {
        parent: {
          internal: { owner: { nin: "gatsby-transformer-react-docgen" } }
        }
        frontmatter: { type: {} }
      }
      sort: { fields: frontmatter___title }
    ) {
      categories: group(field: frontmatter___categories) {
        nodes {
          ...ComponentPage
        }
        fieldValue
      }
      types: group(field: frontmatter___type) {
        nodes {
          ...ComponentPage
        }
        fieldValue
      }
      all: nodes {
        ...ComponentPage
      }
    }
  }

  fragment ComponentPage on Mdx {
    id
    frontmatter {
      categories
      type
      title
      status
    }
    fields {
      slug
    }
  }
`;

const ComponentNavItem = ({
  id, fields, frontmatter, ...props
}) => {
  const isDeprecated = frontmatter?.status?.toLowerCase().includes('deprecate') || false;
  const linkNode = isDeprecated ? (
    <OverlayTrigger
      placement="left"
      overlay={<Tooltip id={`tooltip-deprecated-${id}`}>Deprecated</Tooltip>}
    >
      <Link className="text-muted" to={fields.slug}>{frontmatter.title}</Link>
    </OverlayTrigger>
  ) : (
    <Link to={fields.slug}>{frontmatter.title}</Link>
  );
  return (
    <li {...props} className="d-flex align-items-center">
      {linkNode}
    </li>
  );
};

ComponentNavItem.propTypes = {
  id: PropTypes.string.isRequired,
  fields: PropTypes.shape({
    slug: PropTypes.string.isRequired,
  }).isRequired,
  frontmatter: PropTypes.shape({
    title: PropTypes.string.isRequired,
    status: PropTypes.string,
  }).isRequired,
};

const MenuComponentList = ({ children }) => (
  <div className="menu-component-list">{children}</div>
);

MenuComponentList.propTypes = {
  children: PropTypes.node.isRequired,
};

const MenuComponentListCategory = ({ children, title }) => (
  <div className="menu-component-list-category">
    <h3>{title}</h3>
    {children}
  </div>
);

const handlePlaygroundClick = () => {
  global.analytics.track('openedx.paragon.menu.playground.visit_playground.clicked');
};

MenuComponentListCategory.propTypes = {
  children: PropTypes.node.isRequired,
  title: PropTypes.string.isRequired,
};

const Menu = () => {
  const { components } = useStaticQuery(menuQuery);
  const { categories, all } = components;

  return (
    <Container size="xl" className="py-5">
      <Row className="mb-5">
        <Col sm={3}>
          <h2 className="mb-4">Guides</h2>
          <ul className="list-unstyled small mb-5">
            <li>
              <Link to="/guides/installation-and-usage">
                Getting started
              </Link>
            </li>
            <li>
              <a
                target="_blank"
                rel="noopener noreferrer"
                href="https://openedx.atlassian.net/wiki/spaces/BPL/pages/1773502564/Component+Contribution+Process"
              >
                Contributing
              </a>
            </li>
            <li>
              <Link to="/insights">Usage insights</Link>
            </li>
          </ul>
          <h3 className="mb-4">Foundations</h3>
          <ul className="list-unstyled small foundations-list mb-5">
            <li className="mr-3">
              <Link to="/foundations/colors">Colors</Link>
            </li>
            <li className="mr-3">
              <Link to="/foundations/typography">Typography</Link>
            </li>
            <li className="mr-3">
              <Link to="/foundations/layout">Layout</Link>
            </li>
            <li className="mr-3">
              <Link to="/foundations/spacing">Spacing</Link>
            </li>
            <li className="mr-3">
              <Link to="/foundations/icons">Icons</Link>
            </li>
            <li className="mr-3">
              <Link to="/foundations/css-utilities">CSS Utility Classes</Link>
            </li>
            <li className="mr-3">
              <Link to="/foundations/responsive">Responsive</Link>
            </li>
          </ul>
          <h3 className="mb-4">
            Playground
            <Badge className="ml-1 align-bottom" variant="info">Beta</Badge>
          </h3>
          <ul className="list-unstyled small mb-5">
            <li className="mr-3 mb-3">
              A drag-and-drop UI builder for prototyping with Paragon components.
            </li>
            <li className="mr-3">
              <OverlayTrigger
                trigger="focus"
                overlay={(
                  <Popover id="playground-popover">
                    <Popover.Title as="h3">
                      <Icon src={Issue} />
                      Ð¡oming soon
                    </Popover.Title>
                    <Popover.Content>
                      Playground is under development
                    </Popover.Content>
                  </Popover>
                )}
              >
                <Button
                  className="mr-2 mb-2"
                  size="sm"
                  variant="outline-primary"
                  onClick={handlePlaygroundClick}
                >
                  Visit playground
                </Button>
              </OverlayTrigger>
            </li>
          </ul>
        </Col>
        <Col sm={9}>
          <h3 className="mb-4">Components</h3>
          <MenuComponentList>
            {categories.map(({ fieldValue, nodes }) => (
              <MenuComponentListCategory key={fieldValue} title={fieldValue}>
                <ul className="list-unstyled small mb-4">
                  {nodes
                    .map(node => ({ key: node.id, ...node }))
                    .map(ComponentNavItem)}
                </ul>
              </MenuComponentListCategory>
            ))}
          </MenuComponentList>
        </Col>
      </Row>
      <div className="menu-all-components pt-5">
        <h3 className="mb-4">All components (A-Z)</h3>
        <MenuComponentList>
          <ul className="list-unstyled small mb-4">
            {all.map(node => ({ key: node.id, ...node })).map(ComponentNavItem)}
          </ul>
        </MenuComponentList>
      </div>
    </Container>
  );
};

export default Menu;
